# -*- coding: utf-8 -*-
"""Test Face Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q8FKMfjv9IiXkoRtQqMfukR0H_QLoEBf
"""

!pip install requests
!pip install Pillow
!pip install numpy

import requests
from PIL import Image
from io import BytesIO
import numpy as np
from keras.models import load_model
from keras.preprocessing import image

# Load the saved model
model = load_model('/content/drive/MyDrive/Colab Notebooks/emotion_recognition_model.keras')

# Function to preprocess the image
def preprocess_image(image):
    # Resize the image to the required input shape of the model
    image = image.resize((224, 224))  # Adjust the size as per your model's input shape
    # Convert the image to a numpy array
    image_array = np.array(image)
    # Normalize the pixel values to be in the range [0, 1]
    image_array = image_array / 255.0
    # Add batch dimension
    image_array = np.expand_dims(image_array, axis=0)
    return image_array

def predict_emotion_from_image(image_path):
    # Load the image from file
    img = image.load_img(image_path, grayscale=True, target_size=(48, 48))

    # Convert to array and normalize
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array /= 255.0

    # Make prediction
    predicted_class = model.predict(img_array)

    # Decode the prediction
    predicted_emotion = decode_emotion(predicted_class)

    return predicted_emotion

def decode_emotion(predicted_class):
    # Define the mapping of class indices to emotion labels
    emotion_labels = ['angry', 'contempt', 'disgust', 'fear', 'happy', 'sadness', 'surprise']

    # Get the index of the predicted class
    predicted_index = np.argmax(predicted_class)

    # Get the corresponding emotion label
    predicted_emotion = emotion_labels[predicted_index]

    return predicted_emotion

# Example usage
image_path = '/content/drive/MyDrive/Colab Notebooks/test.jpg'  # Replace with your local image path
predicted_emotion = predict_emotion_from_image(image_path)
print('Predicted emotion:', predicted_emotion)